#!/usr/bin/python  
#! -*- coding=utf-8 -*-
import os  
import sys
import subprocess
import time
from optparse import OptionParser 
  




# done pass
def get_abs_path_for_linux(base_path,target_path):
    # /开头的肯定是绝对路径
    target_path=target_path.strip()
    base_path=base_path.strip()
    bpart=target_path.split("/")
    fin_list=[]
    if base_path[0]!="/":
        print "run dir is not absolute path"
        return None
    if target_path!="":
        if target_path[0]=="/":
            return target_path
        elif bpart[0]!="." and bpart[0]!="..":
            return target_path
        else:
            if base_path[-1]=="/":
                fin_path=base_path+target_path
            else:
                fin_path=base_path+"/"+target_path
            
            cpart=fin_path.split("/")
            for i in cpart:
                
                # 如果是..，去掉fin_list的最后一个
                # 如果是. 直接跳过这个.
                if i==".":
                    pass
                elif i=="..":
                    fin_list.pop()
                else:
                    fin_list.append(i)
            
            out_path="/".join(fin_list)

            return out_path

                
    else:
        
        return ""

# done pass
def daemonize(target_dir, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):  
    #重定向标准文件描述符（默认情况下定向到/dev/null）  
    try:   
        pid = os.fork()   
        #父进程(会话组头领进程)退出，这意味着一个非会话组头领进程永远不能重新获得控制终端。  
        if pid > 0:  
            sys.exit(0)   
            #父进程退出  
    except OSError, e:   
        sys.stderr.write("fork #1 failed: (%d) %s\n" % (e.errno, e.strerror) )  
        sys.exit(1)  
  
    #从母体环境脱离  
    #chdir确认进程不保持任何目录于使用状态，否则不能umount一个文件系统。也可以改变到对于守护程序运行重要的文件所在目录  
    os.chdir(target_dir)  
    #调用umask(0)以便拥有对于写的任何东西的完全控制，因为有时不知道继承了什么样的umask。  
    os.umask(0)   
    #setsid调用成功后，进程成为新的会话组长和新的进程组长，并与原来的登录会话和进程组脱离。  
    os.setsid()    
  
    #执行第二次fork  
    try:   
        pid = os.fork()   
        if pid > 0:  
            sys.exit(0)
            #第二个父进程退出  
    except OSError, e:   
        sys.stderr.write("fork #2 failed: (%d) %s\n" % (e.errno, e.strerror) )  
        sys.exit(1)  
  
    #进程已经是守护进程了，重定向标准文件描述符  
  
    for f in sys.stdout, sys.stderr:
        f.flush()  
    si = open(stdin, 'r')  
    so = open(stdout, 'a+')  
    se = open(stderr, 'a+', 0)  
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())  
    os.dup2(se.fileno(), sys.stderr.fileno())  
  
#示例函数：每秒打印一个数字和时间戳  


def debug_mode(cmdline):
    # 执行一个命令，获得其pid
    cmd_object=subprocess.Popen(cmdline,shell=True,stdin=None,stdout=None, stderr=None )
    the_pid=str(cmd_object.pid)
    print the_pid




def start_process(pidfile,lockfile,cmdline,outpid):

    cmd_object=subprocess.Popen(["/bin/bash","-c",cmdline],stdin=None,stdout=None, stderr=None )
    
    if outpid==True:
        # 获得外部生成的pid文件
        time.sleep(1.5)
        f_h=open(pidfile,"r")
        the_pid=f_h.read().strip()
        f_h.close()

    else:
        # 本地生成pid文件
        the_pid=str(cmd_object.pid)
        f_h=open(pidfile,"w")
        f_h.write(the_pid)
        f_h.close()
        time.sleep(0.5)
        
        
    the_real_cmd=get_now_run_cmdline(the_pid)
    if the_real_cmd is not None:
        f_h_lockfile=open(lockfile,"w")
        f_h_lockfile.write(the_real_cmd)
        f_h_lockfile.close()
        return True
    else:
        return False
    
    
def stop_process(pidfile,lockfile):
    pid_num=check_pid_file(pidfile,lockfile)
    if pid_num is not None:
        cmd_object=subprocess.call("kill -TERM "+str(pid_num),shell=True)
        time_out_set=10
        start_now_time=time.time()
        while True:
            # check pid dead
            if check_pid_file(pidfile,lockfile) is None:
                return True
            time.sleep(0.1)
            if time_out_set+start_now_time<time.time():
                subprocess.call("kill -KILL "+str(pid_num),shell=True)
                return True
                
        return True
    else:
        return False
    
def is_num_by_except(num):
    try:
        int(num)
        return True
    except ValueError:
#        print "%s ValueError" % num
        return False    
    
def check_pid_file(pidfile,lockfile):
    if os.path.exists(pidfile)==True:
        f_h=open(pidfile,"r")
        f_c=f_h.read().strip()
        f_h.close()
        if is_num_by_except(f_c)==True:
            
            if check_pid_run(int(f_c),lockfile)==True:
                # print f_c+" running"
                return int(f_c)
            else:
                # print "not running"
                return None
        else:
            # print "not running"
            return None
            
def pid_run_status(pid_num):
    
    if os.path.exists("/proc/"+str(pid_num)+"/cmdline")==True: 
        return True
    else:
        return False
    
            
def get_now_run_cmdline(pid_num):
    
    if os.path.exists("/proc/"+str(pid_num)+"/cmdline")==True: 
        f_h=open("/proc/"+str(pid_num)+"/cmdline","r")
        in_cmd_line=f_h.read().strip()
        f_h.close()
        return in_cmd_line
    else:
        return None
            
def check_pid_run(pid_num, lockfile):
    if os.path.exists(lockfile)==True:
    
        f_h_lockfile=open(lockfile,"r")
        f_c=f_h_lockfile.read().strip()
        f_h_lockfile.close()
        now_cmdline=get_now_run_cmdline(pid_num)
        if f_c==now_cmdline:
            return True
        else:
            return False
    else:
        return False
    
  
if __name__ == "__main__":  
    parser = OptionParser()  
    parser.add_option("--pidfile", "--pidfile", dest="pidfile", default='', 
                      help="pid file path", metavar="FILE")  

    parser.add_option("--outpid", "--outpid",  
                      action="store_true", dest="outpid", default=False,  
                      help="is wait cmd create pid file")  

    parser.add_option("--lockfile", "--lockfile", dest="lockfile", default='', 
                      help="lock file path", metavar="FILE")  

    parser.add_option("--homedir", "--homedir", dest="homedir", default='/', 
                      help="start cmd path", metavar="FILE")  

    parser.add_option("--stdout", "--stdout", dest="stdout", default='/dev/null', 
                      help="start cmd path", metavar="FILE")  

    parser.add_option("--stderr", "--stderr", dest="stderr", default='/dev/null', 
                      help="start cmd path", metavar="FILE")  

    parser.add_option("--cmd", "--cmd", dest="runcmd",  default='',   
                      help="start cmdline", metavar="cmdline") 

    parser.add_option("--action", "--action", dest="action",  default='start',  
                      help="do what", metavar="start|stop|restart|status|debug") 
      
    (options, args) = parser.parse_args() 

    # 命令行
    cmdline=options.runcmd
    # pid文件
    pidfile=options.pidfile
    # lock文件
    lockfile=options.lockfile
    # 使用程序自创建的pid文件
    outpid=options.outpid
    # 起始路径
    run_dir=options.homedir
    daemon_stdout=options.stdout
    daemon_stderr=options.stderr

    work_action=options.action

        
    if os.path.exists(run_dir)==False:
        print "[Error] run dir not exists"
        sys.exit(1)

    
    if work_action=="debug":
        debug_mode(cmdline)
    
    elif work_action=="start":
        if check_pid_file(pidfile, lockfile) is None:
            print "starting...   "
            #pass
            daemonize(run_dir,'/dev/null',daemon_stdout,daemon_stderr)  
            if start_process(pidfile,lockfile,cmdline,outpid):
                sys.exit(0)
            else:
                sys.exit(1)
        else:
            print "already running"
            sys.exit(1)
        
    elif work_action=="stop":
        print "stop...   "
        if stop_process(pidfile,lockfile):
            print '[OK]'
            sys.exit(0)
        else:
            print '[FAIL]'
            sys.exit(1)

    elif work_action=="restart":
        print "restart...   "
        stop_process(pidfile,lockfile)
        time.sleep(0.5)
        if check_pid_file(pidfile, lockfile) is None:
            #pass
            daemonize(run_dir,'/dev/null',daemon_stdout,daemon_stderr)  
            if start_process(pidfile,lockfile,cmdline,outpid):
                sys.exit(0)
            else:
                sys.exit(1)
        else:
            print '[FAIL]'
            sys.exit(1)


    elif work_action=="status":
        print "status... "
        if check_pid_file(pidfile,lockfile) is not None:
            print '[OK]'
            sys.exit(0)
        else:
            print '[FAIL]'
            sys.exit(1)
            
